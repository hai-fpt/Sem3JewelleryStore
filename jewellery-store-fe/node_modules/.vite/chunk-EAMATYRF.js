import {
  Grow_default
} from "./chunk-XIBHA7W2.js";
import {
  init_useEventCallback,
  useEventCallback_default
} from "./chunk-ESDG7TS3.js";
import {
  Paper_default
} from "./chunk-LLLPM56K.js";
import {
  useTheme
} from "./chunk-IPHZFQRG.js";
import {
  capitalize_default,
  init_capitalize
} from "./chunk-RATMRU2N.js";
import {
  ClickAwayListener_default,
  composeClasses,
  emphasize,
  generateUtilityClass,
  generateUtilityClasses,
  init_ClickAwayListener,
  init_base,
  init_esm,
  init_styled,
  init_useThemeProps,
  styled_default,
  useThemeProps2 as useThemeProps
} from "./chunk-IXV6ZRSC.js";
import {
  _objectWithoutPropertiesLoose,
  clsx_m_default,
  init_clsx_m,
  init_objectWithoutPropertiesLoose,
  require_jsx_runtime,
  require_prop_types
} from "./chunk-5BZBJSNM.js";
import {
  _extends,
  init_extends
} from "./chunk-IM367PET.js";
import {
  require_react
} from "./chunk-3E7R243F.js";
import {
  __toESM
} from "./chunk-BQAOEP2F.js";

// node_modules/@mui/material/SnackbarContent/snackbarContentClasses.js
init_base();
function getSnackbarContentUtilityClass(slot) {
  return generateUtilityClass("MuiSnackbarContent", slot);
}
var snackbarContentClasses = generateUtilityClasses("MuiSnackbarContent", ["root", "message", "action"]);
var snackbarContentClasses_default = snackbarContentClasses;

// node_modules/@mui/material/SnackbarContent/SnackbarContent.js
init_objectWithoutPropertiesLoose();
init_extends();
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
init_clsx_m();
init_base();
init_esm();
init_styled();
init_useThemeProps();
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var _excluded = ["action", "className", "message", "role"];
var useUtilityClasses = (ownerState) => {
  const {
    classes
  } = ownerState;
  const slots = {
    root: ["root"],
    action: ["action"],
    message: ["message"]
  };
  return composeClasses(slots, getSnackbarContentUtilityClass, classes);
};
var SnackbarContentRoot = styled_default(Paper_default, {
  name: "MuiSnackbarContent",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme
}) => {
  const emphasis = theme.palette.mode === "light" ? 0.8 : 0.98;
  const backgroundColor = emphasize(theme.palette.background.default, emphasis);
  return _extends({}, theme.typography.body2, {
    color: theme.palette.getContrastText(backgroundColor),
    backgroundColor,
    display: "flex",
    alignItems: "center",
    flexWrap: "wrap",
    padding: "6px 16px",
    borderRadius: theme.shape.borderRadius,
    flexGrow: 1,
    [theme.breakpoints.up("sm")]: {
      flexGrow: "initial",
      minWidth: 288
    }
  });
});
var SnackbarContentMessage = styled_default("div", {
  name: "MuiSnackbarContent",
  slot: "Message",
  overridesResolver: (props, styles) => styles.message
})({
  padding: "8px 0"
});
var SnackbarContentAction = styled_default("div", {
  name: "MuiSnackbarContent",
  slot: "Action",
  overridesResolver: (props, styles) => styles.action
})({
  display: "flex",
  alignItems: "center",
  marginLeft: "auto",
  paddingLeft: 16,
  marginRight: -8
});
var SnackbarContent = React.forwardRef(function SnackbarContent2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiSnackbarContent"
  });
  const {
    action,
    className,
    message,
    role = "alert"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const ownerState = props;
  const classes = useUtilityClasses(ownerState);
  return (0, import_jsx_runtime2.jsxs)(SnackbarContentRoot, _extends({
    role,
    square: true,
    elevation: 6,
    className: clsx_m_default(classes.root, className),
    ownerState,
    ref
  }, other, {
    children: [(0, import_jsx_runtime.jsx)(SnackbarContentMessage, {
      className: classes.message,
      ownerState,
      children: message
    }), action ? (0, import_jsx_runtime.jsx)(SnackbarContentAction, {
      className: classes.action,
      ownerState,
      children: action
    }) : null]
  }));
});
true ? SnackbarContent.propTypes = {
  action: import_prop_types.default.node,
  classes: import_prop_types.default.object,
  className: import_prop_types.default.string,
  message: import_prop_types.default.node,
  role: import_prop_types.default.string,
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object])
} : void 0;
var SnackbarContent_default = SnackbarContent;

// node_modules/@mui/material/Snackbar/snackbarClasses.js
init_base();
function getSnackbarUtilityClass(slot) {
  return generateUtilityClass("MuiSnackbar", slot);
}
var snackbarClasses = generateUtilityClasses("MuiSnackbar", ["root", "anchorOriginTopCenter", "anchorOriginBottomCenter", "anchorOriginTopRight", "anchorOriginBottomRight", "anchorOriginTopLeft", "anchorOriginBottomLeft"]);
var snackbarClasses_default = snackbarClasses;

// node_modules/@mui/material/Snackbar/Snackbar.js
init_objectWithoutPropertiesLoose();
init_extends();
var React2 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());
init_clsx_m();
init_base();
init_ClickAwayListener();
init_styled();
init_useThemeProps();
init_useEventCallback();
init_capitalize();
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var _excluded2 = ["onEnter", "onExited"];
var _excluded22 = ["action", "anchorOrigin", "autoHideDuration", "children", "className", "ClickAwayListenerProps", "ContentProps", "disableWindowBlurListener", "message", "onBlur", "onClose", "onFocus", "onMouseEnter", "onMouseLeave", "open", "resumeHideDuration", "TransitionComponent", "transitionDuration", "TransitionProps"];
var useUtilityClasses2 = (ownerState) => {
  const {
    classes,
    anchorOrigin
  } = ownerState;
  const slots = {
    root: ["root", `anchorOrigin${capitalize_default(anchorOrigin.vertical)}${capitalize_default(anchorOrigin.horizontal)}`]
  };
  return composeClasses(slots, getSnackbarUtilityClass, classes);
};
var SnackbarRoot = styled_default("div", {
  name: "MuiSnackbar",
  slot: "Root",
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, styles[`anchorOrigin${capitalize_default(ownerState.anchorOrigin.vertical)}${capitalize_default(ownerState.anchorOrigin.horizontal)}`]];
  }
})(({
  theme,
  ownerState
}) => {
  const center = _extends({}, !ownerState.isRtl && {
    left: "50%",
    right: "auto",
    transform: "translateX(-50%)"
  }, ownerState.isRtl && {
    right: "50%",
    left: "auto",
    transform: "translateX(50%)"
  });
  return _extends({
    zIndex: theme.zIndex.snackbar,
    position: "fixed",
    display: "flex",
    left: 8,
    right: 8,
    justifyContent: "center",
    alignItems: "center"
  }, ownerState.anchorOrigin.vertical === "top" ? {
    top: 8
  } : {
    bottom: 8
  }, ownerState.anchorOrigin.horizontal === "left" && {
    justifyContent: "flex-start"
  }, ownerState.anchorOrigin.horizontal === "right" && {
    justifyContent: "flex-end"
  }, {
    [theme.breakpoints.up("sm")]: _extends({}, ownerState.anchorOrigin.vertical === "top" ? {
      top: 24
    } : {
      bottom: 24
    }, ownerState.anchorOrigin.horizontal === "center" && center, ownerState.anchorOrigin.horizontal === "left" && _extends({}, !ownerState.isRtl && {
      left: 24,
      right: "auto"
    }, ownerState.isRtl && {
      right: 24,
      left: "auto"
    }), ownerState.anchorOrigin.horizontal === "right" && _extends({}, !ownerState.isRtl && {
      right: 24,
      left: "auto"
    }, ownerState.isRtl && {
      left: 24,
      right: "auto"
    }))
  });
});
var Snackbar = React2.forwardRef(function Snackbar2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiSnackbar"
  });
  const theme = useTheme();
  const defaultTransitionDuration = {
    enter: theme.transitions.duration.enteringScreen,
    exit: theme.transitions.duration.leavingScreen
  };
  const {
    action,
    anchorOrigin: {
      vertical,
      horizontal
    } = {
      vertical: "bottom",
      horizontal: "left"
    },
    autoHideDuration = null,
    children,
    className,
    ClickAwayListenerProps,
    ContentProps,
    disableWindowBlurListener = false,
    message,
    onBlur,
    onClose,
    onFocus,
    onMouseEnter,
    onMouseLeave,
    open,
    resumeHideDuration,
    TransitionComponent = Grow_default,
    transitionDuration = defaultTransitionDuration,
    TransitionProps: {
      onEnter,
      onExited
    } = {}
  } = props, TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded2), other = _objectWithoutPropertiesLoose(props, _excluded22);
  const isRtl = theme.direction === "rtl";
  const ownerState = _extends({}, props, {
    anchorOrigin: {
      vertical,
      horizontal
    },
    isRtl
  });
  const classes = useUtilityClasses2(ownerState);
  const timerAutoHide = React2.useRef();
  const [exited, setExited] = React2.useState(true);
  const handleClose = useEventCallback_default((...args) => {
    if (onClose) {
      onClose(...args);
    }
  });
  const setAutoHideTimer = useEventCallback_default((autoHideDurationParam) => {
    if (!onClose || autoHideDurationParam == null) {
      return;
    }
    clearTimeout(timerAutoHide.current);
    timerAutoHide.current = setTimeout(() => {
      handleClose(null, "timeout");
    }, autoHideDurationParam);
  });
  React2.useEffect(() => {
    if (open) {
      setAutoHideTimer(autoHideDuration);
    }
    return () => {
      clearTimeout(timerAutoHide.current);
    };
  }, [open, autoHideDuration, setAutoHideTimer]);
  const handlePause = () => {
    clearTimeout(timerAutoHide.current);
  };
  const handleResume = React2.useCallback(() => {
    if (autoHideDuration != null) {
      setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);
    }
  }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);
  const handleFocus = (event) => {
    if (onFocus) {
      onFocus(event);
    }
    handlePause();
  };
  const handleMouseEnter = (event) => {
    if (onMouseEnter) {
      onMouseEnter(event);
    }
    handlePause();
  };
  const handleBlur = (event) => {
    if (onBlur) {
      onBlur(event);
    }
    handleResume();
  };
  const handleMouseLeave = (event) => {
    if (onMouseLeave) {
      onMouseLeave(event);
    }
    handleResume();
  };
  const handleClickAway = (event) => {
    if (onClose) {
      onClose(event, "clickaway");
    }
  };
  const handleExited = (node) => {
    setExited(true);
    if (onExited) {
      onExited(node);
    }
  };
  const handleEnter = (node, isAppearing) => {
    setExited(false);
    if (onEnter) {
      onEnter(node, isAppearing);
    }
  };
  React2.useEffect(() => {
    if (!disableWindowBlurListener && open) {
      window.addEventListener("focus", handleResume);
      window.addEventListener("blur", handlePause);
      return () => {
        window.removeEventListener("focus", handleResume);
        window.removeEventListener("blur", handlePause);
      };
    }
    return void 0;
  }, [disableWindowBlurListener, handleResume, open]);
  React2.useEffect(() => {
    if (!open) {
      return void 0;
    }
    function handleKeyDown(nativeEvent) {
      if (!nativeEvent.defaultPrevented) {
        if (nativeEvent.key === "Escape" || nativeEvent.key === "Esc") {
          if (onClose) {
            onClose(nativeEvent, "escapeKeyDown");
          }
        }
      }
    }
    document.addEventListener("keydown", handleKeyDown);
    return () => {
      document.removeEventListener("keydown", handleKeyDown);
    };
  }, [exited, open, onClose]);
  if (!open && exited) {
    return null;
  }
  return (0, import_jsx_runtime3.jsx)(ClickAwayListener_default, _extends({
    onClickAway: handleClickAway
  }, ClickAwayListenerProps, {
    children: (0, import_jsx_runtime3.jsx)(SnackbarRoot, _extends({
      className: clsx_m_default(classes.root, className),
      onBlur: handleBlur,
      onFocus: handleFocus,
      onMouseEnter: handleMouseEnter,
      onMouseLeave: handleMouseLeave,
      ownerState,
      ref,
      role: "presentation"
    }, other, {
      children: (0, import_jsx_runtime3.jsx)(TransitionComponent, _extends({
        appear: true,
        in: open,
        timeout: transitionDuration,
        direction: vertical === "top" ? "down" : "up",
        onEnter: handleEnter,
        onExited: handleExited
      }, TransitionProps, {
        children: children || (0, import_jsx_runtime3.jsx)(SnackbarContent_default, _extends({
          message,
          action
        }, ContentProps))
      }))
    }))
  }));
});
true ? Snackbar.propTypes = {
  action: import_prop_types2.default.node,
  anchorOrigin: import_prop_types2.default.shape({
    horizontal: import_prop_types2.default.oneOf(["center", "left", "right"]).isRequired,
    vertical: import_prop_types2.default.oneOf(["bottom", "top"]).isRequired
  }),
  autoHideDuration: import_prop_types2.default.number,
  children: import_prop_types2.default.element,
  classes: import_prop_types2.default.object,
  className: import_prop_types2.default.string,
  ClickAwayListenerProps: import_prop_types2.default.object,
  ContentProps: import_prop_types2.default.object,
  disableWindowBlurListener: import_prop_types2.default.bool,
  key: () => null,
  message: import_prop_types2.default.node,
  onBlur: import_prop_types2.default.func,
  onClose: import_prop_types2.default.func,
  onFocus: import_prop_types2.default.func,
  onMouseEnter: import_prop_types2.default.func,
  onMouseLeave: import_prop_types2.default.func,
  open: import_prop_types2.default.bool,
  resumeHideDuration: import_prop_types2.default.number,
  sx: import_prop_types2.default.oneOfType([import_prop_types2.default.arrayOf(import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object, import_prop_types2.default.bool])), import_prop_types2.default.func, import_prop_types2.default.object]),
  TransitionComponent: import_prop_types2.default.elementType,
  transitionDuration: import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.shape({
    appear: import_prop_types2.default.number,
    enter: import_prop_types2.default.number,
    exit: import_prop_types2.default.number
  })]),
  TransitionProps: import_prop_types2.default.object
} : void 0;
var Snackbar_default = Snackbar;

export {
  getSnackbarContentUtilityClass,
  snackbarContentClasses_default,
  SnackbarContent_default,
  getSnackbarUtilityClass,
  snackbarClasses_default,
  Snackbar_default
};
//# sourceMappingURL=chunk-EAMATYRF.js.map
